(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{377:function(n,t,e){"use strict";e.r(t);var a=e(45),r=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h5",{attrs:{id:"什么是vue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是vue"}},[n._v("#")]),n._v(" 什么是Vue")]),n._v(" "),e("ul",[e("li",[n._v("如果不使用 Vue, 那么就会用到 JS 或者 JQuery，通过操作 HTML DOM 的方式，把数据显示上去。")]),n._v(" "),e("li",[n._v("如果使用Vue,那么仅仅需要提供数据，以及数据要绑定到的元素的id,就行了,不需要显式地操作HTML DOM。")])]),n._v(" "),e("hr"),n._v(" "),e("h5",{attrs:{id:"监听事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#监听事件"}},[n._v("#")]),n._v(" 监听事件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<div id="div1">\n  <div>一共点击了  {{clickNumber}}次</div> \n  \x3c!-- v-on:简写为@ --\x3e\n  <button v-on:click="count">点击</button>\n</div>\n<script>\nnew Vue({\n      el: \'#div1\',\n      data: {\n          clickNumber:0\n      },\n      methods:{\n          count: function(){\n              this.clickNumber++;\n          }\n      }\n    })\n<\/script>\n\n\x3c!-- 冒泡 --\x3e\n<div id="content">\n    <div id="grandFather"  v-on:click="doc">\n        grandFather\n        <div id="father" v-on:click="doc">\n            father\n            <div id="me" v-on:click="doc">\n                me\n                <div id="son" v-on:click="doc">\n                son\n            </div>\n            </div>\n        </div>\n    </div>\n</div>\n\x3c!--\n  me的click后面加上.stop，冒泡到这里就结束；\n  father的click加上.capture，优先触发\n  father的click加上.self，子元素无法触发，只有自己能触发\n  father的click加上.once，只触发一次\n  在click后面添加.prevent阻止页面刷新（只有超链和form这种会导致页面刷新的操作，.prevent才起作用）\n--\x3e\n<script>\n    var content = new Vue({\n        el: "#content",\n        data: {\n            id: \'\'\n        },\n        methods: {\n            doc: function () {\n                this.id= event.currentTarget.id;\n                alert(this.id)\n            }\n        }\n    })\n<\/script>\n')])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"条件语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#条件语句"}},[n._v("#")]),n._v(" 条件语句")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\x3c!--\n  v-if\n  v-else\n  v-else-if\n--\x3e\n<div id="div1">\n  <button v-on:click="toutai"> 看看下辈子投胎是做什么的 </button>\n  <div v-if="number>98"> 神仙</div>\n  <div v-else-if="number>95"> 国家领导人</div>\n  <div v-else> 流浪汉</div>\n</div>\n<script>\nnew Vue({\n      el: \'#div1\',\n      data: {\n          number:0\n      },\n      methods:{\n          toutai: function(){\n             this.number=Math.random()*100\n          }\n      }\n    })\n<\/script>\n')])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[n._v("#")]),n._v(" 循环")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<div id="div1">\n    <table align="center" >\n        <tr class="firstLine">\n            <td>number</td>\n            <td>name</td>\n            <td>hp</td>\n        </tr>\n        <tr v-for="hero,index in heros">\n            <td>{{index+1}}</td>\n            <td>{{hero.name}}</td>\n            <td>{{hero.hp}}</td>\n        </tr>\n    </table>\n</div>\n<script>\nvar data = [\n          {name:"sy",hp:34},\n    ];\nnew Vue({\n      el: \'#div1\',\n      data: {\n          heros:data\n      }\n    })\n<\/script>\n\n\x3c!-- 纯数字遍历 --\x3e\n<div v-for="i in 10">\n')])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"属性绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性绑定"}},[n._v("#")]),n._v(" 属性绑定")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<div id=\"div1\">\n    <a v-bind:href=\"page\">http://12306.com</a>\n</div>\n<script>\nnew Vue({\n      el: '#div1',\n      data:{\n          page:'http://12306.com'\n      }\n    })\n<\/script>\n\n\x3c!--\n  v-bind:href简写成 :href\n--\x3e\n")])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"双向绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双向绑定"}},[n._v("#")]),n._v(" 双向绑定")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<div id="div1">\n    hero name: <input v-model="name" >\n    <button @click="doClick" >提交数据</button>\n</div>\n<script>\nnew Vue({\n      el: \'#div1\',\n      data:{\n        name:"teemo"\n      },\n      methods:{\n          doClick:function(){\n              alert(this.name);\n          }\n      }\n    })\n<\/script>\n\n\x3c!--修饰符\n  .lazy：失去焦点时才进行数据绑定\n  .number：获取文本内容以数字类型\n  .trim：去除前后空白\n--\x3e\n')])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"计算属性、监听属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计算属性、监听属性"}},[n._v("#")]),n._v(" 计算属性、监听属性")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<td align=\"center\">\n  $: {{ dollar }}\n  $: {{ getDollar() }}\n</td>\n<script>\nnew Vue({\n      el: '#div1',\n      data: {\n          exchange:6.4,\n          rmb:0\n      },\n      computed:{\n          dollar:function() {\n              return this.rmb / this.exchange;\n          }\n      },\n      methods:{\n          getDollar:function() {\n              return this.rmb / this.exchange;\n          }\n      }，\n      watch:{\n          rmb:function(val) {\n              this.rmb = val;\n              this.dollar = this.rmb / this.exchange;\n          },\n          dollar:function(val) {\n              this.dollar = val;\n              this.rmb = this.dollar * this.exchange;\n          },\n      }\n    })\n<\/script>\n\n\x3c!--\n  computed有缓存，结束复杂计算的时间；\n  methods每次都会调用\n--\x3e\n\n\x3c!--\n  使用watch监听属性，val为新值\n--\x3e\n")])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"过滤器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[n._v("#")]),n._v(" 过滤器")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<div id=\"div1\">\n    <table align=\"center\" >\n        <tr class=\"firstLine\">\n            <td>输入数据</td>\n            <td>过滤后的结果</td>\n        </tr>      \n        <tr>\n            <td align=\"center\">\n                <input v-model= \"data\"  />\n            </td>\n            <td align=\"center\">\n                {{ data|capitalize|capitalizeLastLetter }}\n            </td>\n        </tr>\n    </table>\n</div>\n<script>\nnew Vue({\n      el: '#div1',\n      data: {\n          data:''\n      },\n      filters:{\n          capitalize:function(value) {\n                if (!value) return '' //如果为空，则返回空字符串\n                value = value.toString()\n                return value.charAt(0).toUpperCase() + value.substring(1)\n          },\n          capitalizeLastLetter:function(value) {\n                if (!value) return '' //如果为空，则返回空字符串\n                value = value.toString()\n                return value.substring(0,value.length-1)+ value.charAt(value.length-1).toUpperCase()\n          }\n      }\n    })\n<\/script>\n\n\x3c!-- 全局过滤器 --\x3e\nVue.filter('capitalize', function (value) {\n    if (!value) return ''\n    value = value.toString()\n    return value.charAt(0).toUpperCase() + value.slice(1)\n})\n")])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[n._v("#")]),n._v(" 组件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<div id="div1">\n    <product></product>\n</div>\n<script>\nnew Vue({\n  el: \'#div1\',\n  components:{\n      \'product\':{\n          template:\'<div class="product" ></div>\'\n      }\n  }\n})\n<\/script>\n\n\x3c!-- 全局组件 --\x3e\nVue.component(\'product\', {\n      template: \'<div class="product" ></div>\'\n    })\n    \n\x3c!-- 参数 --\x3e\nVue.component(\'product\', {\n\t  props:[\'name\'],\n\t  template: \'<div class="product" >{{name}}</div>\'\n\t})\n<product name="123"></product>\n\n\x3c!-- 动态参数 --\x3e\n<div id="div1">\n    组件外的值：<input v-model="outName" ><br>\n    <product v-bind:name="outName"></product>\n</div>\n<script>\nVue.component(\'product\', {\n      props:[\'name\'],\n      template: \'<div class="product" >{{name}}</div>\'\n    })\nnew Vue({\n  el: \'#div1\',\n  data:{\n      outName:\'产品名称\'\n  }\n})\n<\/script>\n\n\x3c!-- 使用JSON数组 --\x3e\n<div id="div1">\n    <product v-for="item in products" v-bind:product="item"></product>\n</div>\n<script>\nVue.component(\'product\', {\n      props:[\'product\'],\n      template: \'<div class="product" v-on:click="increaseSale">{{product.name}} 销量: {{product.sale}} </div>\',\n      methods:{\n          increaseSale:function(){\n              this.product.sale++\n          }\n      }\n    })\nnew Vue({\n  el: \'#div1\',\n  data:{\n      products:[\n                {"name":"1,"sale":"18"},\n                {"name":"2":"35"},\n                {"name":"3","sale":"29"}\n                ]\n  }\n})\n<\/script>\n\n\x3c!-- template构建 --\x3e\nvar tempalateDiv=document.getElementById("tempalate").innerHTML;\nvar templateObject = {\n    props: [\'product\'],\n    template: tempalateDiv,\n      methods: {\n            increaseSales: function () {\n                this.product.sale = parseInt(this.product.sale);\n              this.product.sale += 1\n              this.$emit(\'increment\')\n            }\n          }\n}\nVue.component(\'product\', templateObject)\n')])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"自定义指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义指令"}},[n._v("#")]),n._v(" 自定义指令")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\x3c!--\n  1. 使用Vue.directive 来自定义\n  2. 第一个参数是 指令名称\n  3. el 表示当前html dom对象\n  4. 在方法体内操控当前元素\n--\x3e\nVue.directive('xart', function (el) {\n    el.innerHTML = el.innerHTML + ' ( x-art ) '\n    el.style.color = 'pink'\n})\n<div v-xart> 好好学习，天天向上 </div>\n\n\x3c!-- 带参数 --\x3e\nVue.directive('xart', function (el,binding) {\n\tel.innerHTML = el.innerHTML + '( ' + binding.value.text + ' )'\n\tel.style.color = binding.value.color\n})\n<div v-xart=\"{color:'red',text:'best learning video'}\"> 好好学习，天天向上 </div>\n")])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[n._v("#")]),n._v(" 路由")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\x3c!-- 相当于局部刷新 --\x3e\n\x3c!-- 需要额外的库：vue-router.min.js --\x3e\n<div id=\"app\">\n    <div class=\"menu\">\n        \x3c!-- router-link 相当于就是超链 to 相当于就是 href --\x3e\n        <router-link to=\"/user\">用户管理</router-link>\n        <router-link to=\"/product\">产品管理</router-link>\n        <router-link to=\"/order\">订单管理</router-link>\n    </div>\n    <div class=\"workingRoom\">\n        \x3c!-- 点击上面的/user,那么/user 对应的内容就会显示在router-view 这里 --\x3e\n         <router-view></router-view>   \n    </div>\n</div>\n<script>\n    /* 申明三个模板( html 片段 ) */\n    var user = { template: '<p>用户管理页面的内容</p>' };\n    var second = { template: '<p>产品管理页面的内容</p>' };\n    var order = { template: '<p>订单管理页面的内容</p>' };\n    /* 定义路由 */\n    var routes = [\n        { path: '/', redirect: '/user'}, // 这个表示会默认渲染 /user，没有这个就是空白\n        { path: '/user', component: user },\n        { path: '/product', component: second },\n        { path: '/order', component: order }\n    ];\n    /* 创建VueRouter实例 */\n    var router = new VueRouter({\n        routes:routes\n    });\n    /* 给vue对象绑定路由 */\n    new Vue({\n        el:\"#app\",\n        router\n    })\n<\/script>\n")])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"钩子函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#钩子函数"}},[n._v("#")]),n._v(" 钩子函数")]),n._v(" "),e("ul",[e("li",[n._v("钩子函数又叫做回调函数，或者事件响应函数。 指的是一个指令在创建过程中，经历不同生命周期的时候，vue.js 框架调用的函数。")])]),n._v(" "),e("hr"),n._v(" "),e("h5",{attrs:{id:"ajax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[n._v("#")]),n._v(" ajax")]),n._v(" "),e("blockquote",[e("p",[n._v("Vue.js 并没有限制使用哪种方式进行 ajax 访问，所以可以使用如下方式")]),n._v(" "),e("ol",[e("li",[n._v("原生 ajax")]),n._v(" "),e("li",[n._v("JQuery")]),n._v(" "),e("li",[n._v("vue-resource")]),n._v(" "),e("li",[n._v("fetch.js")]),n._v(" "),e("li",[n._v("axios.js")])])]),n._v(" "),e("blockquote",[e("p",[n._v("到底用哪种方式呢？")]),n._v(" "),e("ol",[e("li",[n._v("原生一般不在项目中直接用")]),n._v(" "),e("li",[n._v("jquery 不如4，5方便")]),n._v(" "),e("li",[n._v("vue-resource 已经不再维护了，所以不推荐")]),n._v(" "),e("li",[n._v("fetch.js 是 vue.js 官方推荐")]),n._v(" "),e("li",[n._v("axios.js 是vue.js 官方推荐")])])]),n._v(" "),e("hr"),n._v(" "),e("h5",{attrs:{id:"fetch-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fetch-js"}},[n._v("#")]),n._v(" fetch.js")]),n._v(" "),e("ul",[e("li",[n._v("一种ajax框架")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<div id="hero">\n</div>\n<script>\nvar url = "/json.txt"\nfetch(url).then(function(response) {\n  response.json().then(function (jsonObject) {\n    var jsonString = JSON.stringify(jsonObject)\n    document.getElementById("hero").innerHTML = "通过fetch获取到的json数据："+ jsonString;\n  })\n}).catch(function(err){\n    console.log("Fetch错误:"+err);\n})\n<\/script>\n')])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"axios-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#axios-js"}},[n._v("#")]),n._v(" axios.js")]),n._v(" "),e("ul",[e("li",[n._v("一种ajax框架")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<div id="hero"></div>\n<script>\n    var /json.txt"\n    axios.get(url).then(function(response) {\n        var jsonObject = response.data;\n        var jsonString = JSON.stringify(jsonObject)\n        document.getElementById("hero").innerHTML = "通过 axios 获取到的json数据："+ jsonString;\n    })\n<\/script>\n')])])]),e("hr"),n._v(" "),e("h5",{attrs:{id:"vue-cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-cli"}},[n._v("#")]),n._v(" vue-cli")]),n._v(" "),e("ul",[e("li",[n._v("vue-cli 是 vue 出来的一个脚手架，可以进行 组件式地开发")]),n._v(" "),e("li",[n._v("vue-cli ，单页应用 SPA(single page application) 开发的时候是很方便的，但是多页复杂系统的话用起来就比较麻烦了。并不是 vue-cli 不支持 多页系统， 而是为了让 vue-cli 支持多页系统，需要额外装很多插件和工具。")])]),n._v(" "),e("hr"),n._v(" "),e("h5",{attrs:{id:"crud"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#crud"}},[n._v("#")]),n._v(" crud")])])}),[],!1,null,null,null);t.default=r.exports}}]);